#!/usr/bin/env python
PACKAGE = "path_follower"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("simulation_flag", bool_t,   0, "Simulation Flag",              False)
gen.add("kappa_flag"     , bool_t,   0, "Trajectory kappa flag",        False)
gen.add("nearest_flag"   , bool_t,   0, "Nearest point flag",           True)
gen.add("hertz",           int_t,    0, "The working frequency",        40,  0, 120)
gen.add("p_horizon",       int_t,    0, "Length of prediction horizon",    30, 10, 50)
gen.add("c_horizon",       int_t,    0, "Length of control horizon",       5, 1, 50)
gen.add("i_horizon",	   int_t,    0, "Length of implementation horizon", 2, 1, 5)
gen.add("p_q_lon",         double_t, 0, "Penalty on longititude", 0.01, 0, 2)
gen.add("p_q_lat",         double_t, 0, "Penalty on latitude",    0.01, 0, 2)
gen.add("p_q_theta",       double_t, 0, "Penalty on yaw angle",   0.01, 0, 2)
gen.add("p_q_u",           double_t, 0, "Penalty on velocity_u",  0.01, 0, 2)
gen.add("p_q_v",           double_t, 0, "Penalty on velocity_v",  0.01, 0, 2)
gen.add("p_q_theta_dot",   double_t, 0, "Penalty on yaw rate",    0.01, 0, 2)
gen.add("p_r_udot",        double_t, 0, "Penalty on input_acceleration", 0.01, 0, 2)
gen.add("p_r_delta",       double_t, 0, "Penalty on input_wheel angle",  0.01, 0, 2)
gen.add("p_rd_udot",       double_t, 0, "Penalty on d_acceleration",     0.01, 0, 2)
gen.add("p_rd_delta",      double_t, 0, "Penalty on d_wheel angle",      0.01, 0, 2)


#size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                       gen.const("Medium",     int_t, 1, "A medium constant"),
#                       gen.const("Large",      int_t, 2, "A large constant"),
#                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                     "An enum to set size")

#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "path_follower", "DynamicParam"))
